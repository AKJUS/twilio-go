/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
)

// Optional parameters for the method 'CreateInsightsQuestionnairesQuestion'
type CreateInsightsQuestionnairesQuestionParams struct {
	// The Token HTTP request header
	Token *string `json:"Token,omitempty"`
	// The ID of the category
	CategoryId *string `json:"CategoryId,omitempty"`
	// The question.
	Question *string `json:"Question,omitempty"`
	// The description for the question.
	Description *string `json:"Description,omitempty"`
	// The answer_set for the question.
	AnswerSetId *string `json:"AnswerSetId,omitempty"`
	// The flag to enable for disable NA for answer.
	AllowNa *bool `json:"AllowNa,omitempty"`
}

func (params *CreateInsightsQuestionnairesQuestionParams) SetToken(Token string) *CreateInsightsQuestionnairesQuestionParams {
	params.Token = &Token
	return params
}
func (params *CreateInsightsQuestionnairesQuestionParams) SetCategoryId(CategoryId string) *CreateInsightsQuestionnairesQuestionParams {
	params.CategoryId = &CategoryId
	return params
}
func (params *CreateInsightsQuestionnairesQuestionParams) SetQuestion(Question string) *CreateInsightsQuestionnairesQuestionParams {
	params.Question = &Question
	return params
}
func (params *CreateInsightsQuestionnairesQuestionParams) SetDescription(Description string) *CreateInsightsQuestionnairesQuestionParams {
	params.Description = &Description
	return params
}
func (params *CreateInsightsQuestionnairesQuestionParams) SetAnswerSetId(AnswerSetId string) *CreateInsightsQuestionnairesQuestionParams {
	params.AnswerSetId = &AnswerSetId
	return params
}
func (params *CreateInsightsQuestionnairesQuestionParams) SetAllowNa(AllowNa bool) *CreateInsightsQuestionnairesQuestionParams {
	params.AllowNa = &AllowNa
	return params
}

// To create a question for a Category
func (c *ApiService) CreateInsightsQuestionnairesQuestion(params *CreateInsightsQuestionnairesQuestionParams) (*FlexV1InsightsQuestionnairesQuestion, error) {
	path := "/v1/Insights/QM/Questions"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.CategoryId != nil {
		data.Set("CategoryId", *params.CategoryId)
	}
	if params != nil && params.Question != nil {
		data.Set("Question", *params.Question)
	}
	if params != nil && params.Description != nil {
		data.Set("Description", *params.Description)
	}
	if params != nil && params.AnswerSetId != nil {
		data.Set("AnswerSetId", *params.AnswerSetId)
	}
	if params != nil && params.AllowNa != nil {
		data.Set("AllowNa", fmt.Sprint(*params.AllowNa))
	}

	if params != nil && params.Token != nil {
		headers["Token"] = *params.Token
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1InsightsQuestionnairesQuestion{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'DeleteInsightsQuestionnairesQuestion'
type DeleteInsightsQuestionnairesQuestionParams struct {
	// The Token HTTP request header
	Token *string `json:"Token,omitempty"`
}

func (params *DeleteInsightsQuestionnairesQuestionParams) SetToken(Token string) *DeleteInsightsQuestionnairesQuestionParams {
	params.Token = &Token
	return params
}

//
func (c *ApiService) DeleteInsightsQuestionnairesQuestion(QuestionId string, params *DeleteInsightsQuestionnairesQuestionParams) error {
	path := "/v1/Insights/QM/Questions/{QuestionId}"
	path = strings.Replace(path, "{"+"QuestionId"+"}", QuestionId, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Token != nil {
		headers["Token"] = *params.Token
	}

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// Optional parameters for the method 'UpdateInsightsQuestionnairesQuestion'
type UpdateInsightsQuestionnairesQuestionParams struct {
	// The Token HTTP request header
	Token *string `json:"Token,omitempty"`
	// The question.
	Question *string `json:"Question,omitempty"`
	// The description for the question.
	Description *string `json:"Description,omitempty"`
	// The answer_set for the question.
	AnswerSetId *string `json:"AnswerSetId,omitempty"`
	// The flag to enable for disable NA for answer.
	AllowNa *bool `json:"AllowNa,omitempty"`
	// The ID of the category
	CategoryId *string `json:"CategoryId,omitempty"`
}

func (params *UpdateInsightsQuestionnairesQuestionParams) SetToken(Token string) *UpdateInsightsQuestionnairesQuestionParams {
	params.Token = &Token
	return params
}
func (params *UpdateInsightsQuestionnairesQuestionParams) SetQuestion(Question string) *UpdateInsightsQuestionnairesQuestionParams {
	params.Question = &Question
	return params
}
func (params *UpdateInsightsQuestionnairesQuestionParams) SetDescription(Description string) *UpdateInsightsQuestionnairesQuestionParams {
	params.Description = &Description
	return params
}
func (params *UpdateInsightsQuestionnairesQuestionParams) SetAnswerSetId(AnswerSetId string) *UpdateInsightsQuestionnairesQuestionParams {
	params.AnswerSetId = &AnswerSetId
	return params
}
func (params *UpdateInsightsQuestionnairesQuestionParams) SetAllowNa(AllowNa bool) *UpdateInsightsQuestionnairesQuestionParams {
	params.AllowNa = &AllowNa
	return params
}
func (params *UpdateInsightsQuestionnairesQuestionParams) SetCategoryId(CategoryId string) *UpdateInsightsQuestionnairesQuestionParams {
	params.CategoryId = &CategoryId
	return params
}

// To update the question
func (c *ApiService) UpdateInsightsQuestionnairesQuestion(QuestionId string, params *UpdateInsightsQuestionnairesQuestionParams) (*FlexV1InsightsQuestionnairesQuestion, error) {
	path := "/v1/Insights/QM/Questions/{QuestionId}"
	path = strings.Replace(path, "{"+"QuestionId"+"}", QuestionId, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Question != nil {
		data.Set("Question", *params.Question)
	}
	if params != nil && params.Description != nil {
		data.Set("Description", *params.Description)
	}
	if params != nil && params.AnswerSetId != nil {
		data.Set("AnswerSetId", *params.AnswerSetId)
	}
	if params != nil && params.AllowNa != nil {
		data.Set("AllowNa", fmt.Sprint(*params.AllowNa))
	}
	if params != nil && params.CategoryId != nil {
		data.Set("CategoryId", *params.CategoryId)
	}

	if params != nil && params.Token != nil {
		headers["Token"] = *params.Token
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1InsightsQuestionnairesQuestion{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
