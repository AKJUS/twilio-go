/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
	"time"
)

// Optional parameters for the method 'FetchInsightsConversationalAiReportInsights'
type FetchInsightsConversationalAiReportInsightsParams struct {
	// Maximum number of rows to return
	MaxRows *int `json:"MaxRows,omitempty"`
	// The type of report insights required to fetch.Like gauge,channel-metrics,queue-metrics
	ReportId *string `json:"ReportId,omitempty"`
	// The time period for which report insights is needed
	Granularity *string `json:"Granularity,omitempty"`
	// A reference date that should be included in the returned period
	IncludeDate *time.Time `json:"IncludeDate,omitempty"`
}

func (params *FetchInsightsConversationalAiReportInsightsParams) SetMaxRows(MaxRows int) *FetchInsightsConversationalAiReportInsightsParams {
	params.MaxRows = &MaxRows
	return params
}
func (params *FetchInsightsConversationalAiReportInsightsParams) SetReportId(ReportId string) *FetchInsightsConversationalAiReportInsightsParams {
	params.ReportId = &ReportId
	return params
}
func (params *FetchInsightsConversationalAiReportInsightsParams) SetGranularity(Granularity string) *FetchInsightsConversationalAiReportInsightsParams {
	params.Granularity = &Granularity
	return params
}
func (params *FetchInsightsConversationalAiReportInsightsParams) SetIncludeDate(IncludeDate time.Time) *FetchInsightsConversationalAiReportInsightsParams {
	params.IncludeDate = &IncludeDate
	return params
}

// Fetch Instance Based Conversational AI Report Insights
func (c *ApiService) FetchInsightsConversationalAiReportInsights(InstanceSid string, params *FetchInsightsConversationalAiReportInsightsParams) (*FlexV1InsightsConversationalAiReportInsights, error) {
	path := "/v1/Insights/Instances/{InstanceSid}/AI/ReportInsights"
	path = strings.Replace(path, "{"+"InstanceSid"+"}", InstanceSid, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.MaxRows != nil {
		data.Set("MaxRows", fmt.Sprint(*params.MaxRows))
	}
	if params != nil && params.ReportId != nil {
		data.Set("ReportId", *params.ReportId)
	}
	if params != nil && params.Granularity != nil {
		data.Set("Granularity", *params.Granularity)
	}
	if params != nil && params.IncludeDate != nil {
		data.Set("IncludeDate", fmt.Sprint((*params.IncludeDate).Format(time.RFC3339)))
	}

	resp, err := c.requestHandler.Get(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1InsightsConversationalAiReportInsights{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
