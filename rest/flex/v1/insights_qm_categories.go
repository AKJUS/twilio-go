/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package openapi

import (
	"encoding/json"
	"net/url"
	"strings"
)

// Optional parameters for the method 'CreateInsightsQuestionnairesCategory'
type CreateInsightsQuestionnairesCategoryParams struct {
	// The Token HTTP request header
	Token *string `json:"Token,omitempty"`
	// The name of this category.
	Name *string `json:"Name,omitempty"`
}

func (params *CreateInsightsQuestionnairesCategoryParams) SetToken(Token string) *CreateInsightsQuestionnairesCategoryParams {
	params.Token = &Token
	return params
}
func (params *CreateInsightsQuestionnairesCategoryParams) SetName(Name string) *CreateInsightsQuestionnairesCategoryParams {
	params.Name = &Name
	return params
}

// To create a category for Questions
func (c *ApiService) CreateInsightsQuestionnairesCategory(params *CreateInsightsQuestionnairesCategoryParams) (*FlexV1InsightsQuestionnairesCategory, error) {
	path := "/v1/Insights/QM/Categories"

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Name != nil {
		data.Set("Name", *params.Name)
	}

	if params != nil && params.Token != nil {
		headers["Token"] = *params.Token
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1InsightsQuestionnairesCategory{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}

// Optional parameters for the method 'DeleteInsightsQuestionnairesCategory'
type DeleteInsightsQuestionnairesCategoryParams struct {
	// The Token HTTP request header
	Token *string `json:"Token,omitempty"`
}

func (params *DeleteInsightsQuestionnairesCategoryParams) SetToken(Token string) *DeleteInsightsQuestionnairesCategoryParams {
	params.Token = &Token
	return params
}

//
func (c *ApiService) DeleteInsightsQuestionnairesCategory(CategoryId string, params *DeleteInsightsQuestionnairesCategoryParams) error {
	path := "/v1/Insights/QM/Categories/{CategoryId}"
	path = strings.Replace(path, "{"+"CategoryId"+"}", CategoryId, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Token != nil {
		headers["Token"] = *params.Token
	}

	resp, err := c.requestHandler.Delete(c.baseURL+path, data, headers)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}

// Optional parameters for the method 'UpdateInsightsQuestionnairesCategory'
type UpdateInsightsQuestionnairesCategoryParams struct {
	// The Token HTTP request header
	Token *string `json:"Token,omitempty"`
	// The name of this category.
	Name *string `json:"Name,omitempty"`
}

func (params *UpdateInsightsQuestionnairesCategoryParams) SetToken(Token string) *UpdateInsightsQuestionnairesCategoryParams {
	params.Token = &Token
	return params
}
func (params *UpdateInsightsQuestionnairesCategoryParams) SetName(Name string) *UpdateInsightsQuestionnairesCategoryParams {
	params.Name = &Name
	return params
}

// To update the category for Questions
func (c *ApiService) UpdateInsightsQuestionnairesCategory(CategoryId string, params *UpdateInsightsQuestionnairesCategoryParams) (*FlexV1InsightsQuestionnairesCategory, error) {
	path := "/v1/Insights/QM/Categories/{CategoryId}"
	path = strings.Replace(path, "{"+"CategoryId"+"}", CategoryId, -1)

	data := url.Values{}
	headers := make(map[string]interface{})

	if params != nil && params.Name != nil {
		data.Set("Name", *params.Name)
	}

	if params != nil && params.Token != nil {
		headers["Token"] = *params.Token
	}

	resp, err := c.requestHandler.Post(c.baseURL+path, data, headers)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	ps := &FlexV1InsightsQuestionnairesCategory{}
	if err := json.NewDecoder(resp.Body).Decode(ps); err != nil {
		return nil, err
	}

	return ps, err
}
